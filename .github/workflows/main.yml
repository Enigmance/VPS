# name: CI

# on: [push, workflow_dispatch]

# jobs:
#   build:

#     runs-on: windows-latest
#     timeout-minutes: 9999

#     steps:
#     - name: Download
#       run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
#     - name: Extract
#       run: Expand-Archive ngrok.zip
#     - name: Auth
#       run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
#       env:
#         NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
#     - name: Enable TS
#       run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
#     - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
#     - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
#     - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
#     - name: Create Tunnel
#       run: .\ngrok\ngrok.exe tcp --region=eu 3389 --log=stdout

name: Persistent RDP Access

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable RDP
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    - name: Start ngrok Tunnel
      id: start_ngrok
      run: |
        .\ngrok\ngrok.exe tcp 3389 > ngrok_log.txt &
        Start-Sleep -Seconds 5
        $ngrokAddress = Select-String "tcp://" ngrok_log.txt | ForEach-Object { $_.Matches.Groups[0].Value }
        Write-Output $ngrokAddress | Out-File ngrok_address.txt
    - name: Update Cloudflare DNS
      run: |
        $ngrokAddress = Get-Content ngrok_address.txt
        $tcpHost = $ngrokAddress.Split('//')[1].Split(':')[0]
        $tcpPort = $ngrokAddress.Split(':')[1]
        $dnsValue = "$tcpHost:$tcpPort"
        Invoke-RestMethod `
          -Uri "https://api.cloudflare.com/client/v4/zones/$Env:CLOUDFLARE_ZONE_ID/dns_records/$Env:CLOUDFLARE_DNS_RECORD_ID" `
          -Method PATCH `
          -Headers @{
              "Authorization" = "Bearer $Env:CLOUDFLARE_API_TOKEN"
              "Content-Type" = "application/json"
          } `
          -Body (@{ content = $dnsValue } | ConvertTo-Json)
      env:
        CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        CLOUDFLARE_DNS_RECORD_ID: ${{ secrets.CLOUDFLARE_DNS_RECORD_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

